'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import { FileText, Download, Eye, Search, Filter, Calendar, Tag } from 'lucide-react';
import Link from 'next/link';
import PDFViewer from '@/components/PDFViewer';

interface Resource {
  id: string;
  title: string;
  description: string;
  category: string;
  type: 'presentation' | 'document' | 'article';
  date: string;
  tags: string[];
  fileUrl?: string;
  previewUrl?: string;
  size?: string;
}

export default function Resources() {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedType, setSelectedType] = useState('all');
  const [viewingPDF, setViewingPDF] = useState<Resource | null>(null);

  // ÂÆüÈöõ„ÅÆË≥áÊñô„Éá„Éº„Çø
  const resources: Resource[] = [
    {
      id: '1',
      title: 'NotebookLMÂÆåÂÖ®Ê¥ªÁî®„Ç¨„Ç§„Éâ',
      description: 'Google„ÅÆNotebookLM„Çí‰Ωø„Å£„ÅüÂäπÁéáÁöÑ„Å™ÊÉÖÂ†±Êï¥ÁêÜ„Å®Áü•Ë≠òÁÆ°ÁêÜ„ÅÆÂÆüË∑µÁöÑÊâãÊ≥ï',
      category: 'AI„Éª„ÉÑ„Éº„É´Ê¥ªÁî®',
      type: 'presentation',
      date: '2025-01-27',
      tags: ['NotebookLM', 'AI', 'Google', 'ÊÉÖÂ†±Êï¥ÁêÜ', 'Áü•Ë≠òÁÆ°ÁêÜ'],
      fileUrl: '/resources/presentations/notebooklm-guide.pdf',
      size: '1.8 MB'
    },
    {
      id: '2',
      title: 'AI„Ç®„Éº„Ç∏„Çß„É≥„Éà„ÄåGemini CLI„Äç„ÅÆ‰ªïÁµÑ„ÅøÂ§ßËß£Ââñ',
      description: 'Google Gemini API„ÇíÊ¥ªÁî®„Åó„ÅüCLI„ÉÑ„Éº„É´„ÅÆÂÜÖÈÉ®ÊßãÈÄ†„Å®ÂÆüË£ÖÊñπÊ≥ï„ÇíË©≥Á¥∞„Å´Ëß£Ë™¨',
      category: 'ÊäÄË°ìËß£Ë™¨',
      type: 'presentation',
      date: '2025-01-26',
      tags: ['AI', 'Gemini', 'CLI', 'Google API', 'TypeScript'],
      fileUrl: '/resources/presentations/gemini-cli-analysis.pdf',
      size: '2.1 MB'
    },
    {
      id: '2',
      title: '„Éï„É™„Éº„É©„É≥„Çπ„Ç®„É≥„Ç∏„Éã„Ç¢„ÅÆ„Éï„É©„Ç§„Éõ„Ç§„Éº„É´Êà¶Áï•',
      description: '„ÇØ„É©„Ç§„Ç¢„É≥„ÉàÁç≤Âæó„ÇíÂä†ÈÄü„Åï„Åõ„ÇãÈ´ò„Ç§„É≥„Éë„ÇØ„Éà„Å™„Éù„Éº„Éà„Éï„Ç©„É™„Ç™„ÅÆÊßãÁØâ„Å®Ê¥ªÁî®„Å´Èñ¢„Åô„ÇãÊà¶Áï•ÁöÑ„Ç¨„Ç§„Éâ',
      category: '„Éì„Ç∏„Éç„ÇπÊà¶Áï•',
      type: 'presentation',
      date: '2025-01-25',
      tags: ['„Éï„É™„Éº„É©„É≥„Çπ', '„Éù„Éº„Éà„Éï„Ç©„É™„Ç™', 'Êà¶Áï•', '„Éû„Éº„Ç±„ÉÜ„Ç£„É≥„Ç∞'],
      fileUrl: '/resources/presentations/freelance-flywheel.pdf',
      previewUrl: '/resources/presentations/freelance-flywheel-preview.jpg',
      size: '2.4 MB'
    },
    {
      id: '3',
      title: 'FDE„É¢„Éá„É´ÔºöÊó•Êú¨Â∏ÇÂ†¥„Å´„Åä„Åë„Çã‰º¥Ëµ∞ÂûãÈñãÁô∫',
      description: 'È°ßÂÆ¢„ÅÆÊá∏Âøµ„ÇíÂÖãÊúç„Åó„ÄÅÈï∑ÊúüÁöÑÊàêÂäü„ÇíÂèé„ÇÅ„Çã„Åü„ÇÅ„ÅÆÊà¶Áï•ÁöÑ„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ',
      category: '„Çµ„Éº„Éì„ÇπË®≠Ë®à',
      type: 'document',
      date: '2025-01-24',
      tags: ['FDE', '‰º¥Ëµ∞ÂûãÈñãÁô∫', 'Êó•Êú¨Â∏ÇÂ†¥', '„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ'],
      fileUrl: '/resources/documents/fde-model-japan.pdf',
      size: '1.8 MB'
    },
    {
      id: '4',
      title: 'Next.js 15 „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©Âåñ„Ç¨„Ç§„Éâ',
      description: '„Ç®„É≥„Çø„Éº„Éó„É©„Ç§„Ç∫„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Å´„Åä„Åë„ÇãNext.js 15„ÅÆÊúÄÈÅ©ÂåñÊâãÊ≥ï',
      category: 'ÊäÄË°ìËß£Ë™¨',
      type: 'article',
      date: '2025-01-20',
      tags: ['Next.js', '„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ', 'ÊúÄÈÅ©Âåñ', 'React'],
      previewUrl: '/resources/articles/nextjs-optimization-preview.jpg'
    }
  ];

  const categories = ['all', '„Éì„Ç∏„Éç„ÇπÊà¶Áï•', '„Çµ„Éº„Éì„ÇπË®≠Ë®à', 'ÊäÄË°ìËß£Ë™¨', '„Ç±„Éº„Çπ„Çπ„Çø„Éá„Ç£'];
  const types = ['all', 'presentation', 'document', 'article'];

  const filteredResources = resources.filter(resource => {
    const matchesSearch = resource.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         resource.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         resource.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));
    const matchesCategory = selectedCategory === 'all' || resource.category === selectedCategory;
    const matchesType = selectedType === 'all' || resource.type === selectedType;
    return matchesSearch && matchesCategory && matchesType;
  });

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'presentation': return 'üìä';
      case 'document': return 'üìÑ';
      case 'article': return 'üìù';
      default: return 'üìÅ';
    }
  };

  const getTypeLabel = (type: string) => {
    switch (type) {
      case 'presentation': return '„Éó„É¨„Çº„É≥„ÉÜ„Éº„Ç∑„Éß„É≥';
      case 'document': return 'ÊñáÊõ∏';
      case 'article': return 'Ë®ò‰∫ã';
      default: return '„Åù„ÅÆ‰ªñ';
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ja-JP', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });
  };

  return (
    <div className="min-h-screen py-20">
      {/* Hero Section */}
      <section className="py-20 bg-gradient-to-br from-blue-50 to-indigo-100">
        <div className="container mx-auto px-6">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="text-center"
          >
            <h1 className="text-5xl font-bold text-gray-900 mb-6">
              Ë≥áÊñôÈõÜ
            </h1>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">
              ÊäÄË°ìËß£Ë™¨„ÄÅ„Éì„Ç∏„Éç„ÇπÊà¶Áï•„ÄÅ„Ç±„Éº„Çπ„Çπ„Çø„Éá„Ç£„Å™„Å©„ÄÅ
              „Åì„Çå„Åæ„Åß„Å´‰ΩúÊàê„Åó„ÅüË≥áÊñô„ÇíÂÖ¨Èñã„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ
            </p>
          </motion.div>
        </div>
      </section>

      {/* Filters */}
      <section className="py-12 bg-white border-b">
        <div className="container mx-auto px-6">
          <div className="flex flex-col lg:flex-row gap-6 items-center">
            {/* Search */}
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
              <input
                type="text"
                placeholder="Ë≥áÊñô„ÇíÊ§úÁ¥¢..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-600 focus:border-transparent"
              />
            </div>

            {/* Category Filter */}
            <div className="flex items-center gap-2">
              <Filter size={20} className="text-gray-600" />
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-600 focus:border-transparent"
              >
                {categories.map(category => (
                  <option key={category} value={category}>
                    {category === 'all' ? '„Åô„Åπ„Å¶„ÅÆ„Ç´„ÉÜ„Ç¥„É™' : category}
                  </option>
                ))}
              </select>
            </div>

            {/* Type Filter */}
            <div>
              <select
                value={selectedType}
                onChange={(e) => setSelectedType(e.target.value)}
                className="px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-600 focus:border-transparent"
              >
                {types.map(type => (
                  <option key={type} value={type}>
                    {type === 'all' ? '„Åô„Åπ„Å¶„ÅÆÂΩ¢Âºè' : getTypeLabel(type)}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </div>
      </section>

      {/* Resources Grid */}
      <section className="py-20 bg-white">
        <div className="container mx-auto px-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {filteredResources.map((resource, index) => (
              <motion.div
                key={resource.id}
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: index * 0.1 }}
                className="bg-white rounded-lg shadow-lg border hover:shadow-xl transition-shadow duration-200"
              >
                {/* Preview Image */}
                <div className="aspect-video bg-gradient-to-br from-gray-100 to-gray-200 rounded-t-lg overflow-hidden">
                  {resource.previewUrl ? (
                    <div className="w-full h-full bg-gray-200 flex items-center justify-center">
                      <span className="text-6xl">{getTypeIcon(resource.type)}</span>
                    </div>
                  ) : (
                    <div className="w-full h-full flex items-center justify-center text-gray-500">
                      <FileText size={48} />
                    </div>
                  )}
                </div>

                {/* Content */}
                <div className="p-6">
                  <div className="flex items-center gap-2 mb-3">
                    <span className="bg-blue-100 text-blue-600 px-2 py-1 rounded-full text-xs font-semibold">
                      {resource.category}
                    </span>
                    <span className="bg-gray-100 text-gray-600 px-2 py-1 rounded-full text-xs">
                      {getTypeLabel(resource.type)}
                    </span>
                  </div>

                  <h3 className="text-xl font-bold text-gray-900 mb-3 line-clamp-2">
                    {resource.title}
                  </h3>

                  <p className="text-gray-600 mb-4 line-clamp-3">
                    {resource.description}
                  </p>

                  <div className="flex items-center gap-4 text-sm text-gray-500 mb-4">
                    <div className="flex items-center gap-1">
                      <Calendar size={14} />
                      {formatDate(resource.date)}
                    </div>
                    {resource.size && (
                      <div className="flex items-center gap-1">
                        <FileText size={14} />
                        {resource.size}
                      </div>
                    )}
                  </div>

                  {/* Tags */}
                  <div className="flex flex-wrap gap-1 mb-4">
                    {resource.tags.map(tag => (
                      <span
                        key={tag}
                        className="bg-gray-100 text-gray-600 px-2 py-1 rounded text-xs"
                      >
                        #{tag}
                      </span>
                    ))}
                  </div>

                  {/* Actions */}
                  <div className="flex gap-2">
                    {resource.fileUrl && (
                      <button 
                        onClick={() => setViewingPDF(resource)}
                        className="flex-1 bg-gray-100 text-gray-700 py-2 px-4 rounded-lg font-semibold hover:bg-gray-200 transition-colors duration-200 flex items-center justify-center gap-2"
                      >
                        <Eye size={16} />
                        „Éó„É¨„Éì„É•„Éº
                      </button>
                    )}
                    {resource.fileUrl && (
                      <a
                        href={resource.fileUrl}
                        download
                        className="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors duration-200 flex items-center justify-center gap-2"
                      >
                        <Download size={16} />
                        „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
                      </a>
                    )}
                  </div>
                </div>
              </motion.div>
            ))}
          </div>

          {filteredResources.length === 0 && (
            <div className="text-center py-12">
              <FileText size={64} className="text-gray-400 mx-auto mb-4" />
              <h3 className="text-xl font-semibold text-gray-600 mb-2">
                Ë©≤ÂΩì„Åô„ÇãË≥áÊñô„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì
              </h3>
              <p className="text-gray-500">
                Ê§úÁ¥¢Êù°‰ª∂„ÇíÂ§âÊõ¥„Åó„Å¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ
              </p>
            </div>
          )}
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 bg-blue-600 text-white">
        <div className="container mx-auto px-6 text-center">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
          >
            <h2 className="text-4xl font-bold mb-4">
              „Ç´„Çπ„Çø„É†Ë≥áÊñô„ÅÆ‰ΩúÊàê„ÇÇÊâø„Çä„Åæ„Åô
            </h2>
            <p className="text-xl mb-8 opacity-90">
              „ÅÇ„Å™„Åü„ÅÆ„Éì„Ç∏„Éç„Çπ„Å´ÁâπÂåñ„Åó„ÅüË≥áÊñô‰ΩúÊàê„Çí„ÅäÊâã‰ºù„ÅÑ„Åó„Åæ„Åô
            </p>
            <Link
              href="/contact"
              className="bg-white text-blue-600 px-8 py-4 rounded-lg font-semibold hover:bg-gray-100 transition-colors duration-200 inline-block"
            >
              Ë≥áÊñô‰ΩúÊàê„ÇíÁõ∏Ë´á„Åô„Çã
            </Link>
          </motion.div>
        </div>
      </section>

      {/* PDF Viewer Modal */}
      {viewingPDF && viewingPDF.fileUrl && (
        <PDFViewer
          fileUrl={viewingPDF.fileUrl}
          title={viewingPDF.title}
          onClose={() => setViewingPDF(null)}
        />
      )}
    </div>
  );
}